1.为什么使用线程池?
    - 降低资源消耗。通过复用已存在的线程和降低线程关闭的次数来尽可能降低系统性能损耗；
    - 提升系统响应速度。通过复用线程，省去创建线程的过程，因此整体上提升了系统的响应速度；
    - 提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，因此，需要使用线程池来管理线程。
2.线程池工作原理
    - 提交任务 -> 核心线程池 -> 阻塞队列 -> 线程池是否满 -> 按照饱和策略处理
3.线程池参数创建
    - corePoolSize：表示核心线程池的大小。当提交一个任务时，如果当前核心线程池的线程个数没有达到corePoolSize，则会创建新的线程来执行所提交的任务，即使当前核心线程池有空闲的线程。如果当前核心线程池的线程个数已经达到了corePoolSize，则不再重新创建线程。如果调用了prestartCoreThread()或者 prestartAllCoreThreads()，线程池创建的时候所有的核心线程都会被创建并且启动。
    - maximumPoolSize：表示线程池能创建线程的最大个数。如果当阻塞队列已满时，并且当前线程池线程个数没有超过maximumPoolSize的话，就会创建新的线程来执行任务。
    - keepAliveTime：空闲线程存活时间。如果当前线程池的线程个数已经超过了corePoolSize，并且线程空闲时间超过了keepAliveTime的话，就会将这些空闲线程销毁，这样可以尽可能降低系统资源消耗。
    - unit：时间单位。为keepAliveTime指定时间单位。
    - workQueue：阻塞队列。用于保存任务的阻塞队列，关于阻塞队列可以看这篇文章。可以使用ArrayBlockingQueue, LinkedBlockingQueue, SynchronousQueue, PriorityBlockingQueue。
    - threadFactory：创建线程的工程类。可以通过指定线程工厂为每个创建出来的线程设置更有意义的名字，如果出现并发问题，也方便查找问题原因。
    - handler：饱和策略。当线程池的阻塞队列已满和指定的线程都已经开启，说明当前线程池已经处于饱和状态了，那么就需要采用一种策略来处理这种情况。采用的策略有这几种：
        -- AbortPolicy： 直接拒绝所提交的任务，并抛出RejectedExecutionException异常；
        -- CallerRunsPolicy：只用调用者所在的线程来执行任务；
        -- DiscardPolicy：不处理直接丢弃掉任务；
        -- DiscardOldestPolicy：丢弃掉阻塞队列中存放时间最久的任务，执行当前任务
4.execute方法执行逻辑
    - 如果当前运行的线程少于corePoolSize，则会创建新的线程来执行新的任务；
    - 如果运行的线程个数等于或者大于corePoolSize，则会将提交的任务存放到阻塞队列workQueue中；
    - 如果当前workQueue队列已满的话，则会创建新的线程来执行任务；
    - 如果线程个数已经超过了maximumPoolSize，则会使用饱和策略RejectedExecutionHandler来进行处理。
5.关闭线程池(shutdown, shutdownNow)
    - shutdown会将正在执行的任务继续执行完
    - shutdownNow会直接中断正在执行的任务
    - 当所有线程关闭成功,才表示线程池成功关闭
6.合理配置线程池参数
    - 分析任务特性
        - 任务性质: cpu密集任务型, IO密集型, 和混合任务型
        - 任务优先级: 高中低
        - 任务执行时间: 长中短
        - 任务依赖性:是否依赖其他资源,如数据库连接等
    - cpu密集型尽可能配置少线程,例如Ncpu + 1个
    - io密集型需要等待io操作,线程不是一直在执行任务,可以多配置线程.例如2Ncpu
    - 混合型任务拆分成cpu密集型和io密集型,若两个任务执行相差时间不大,则性能会高于串行执行
        - Runtime.getRuntime().availableProcessors()可以获取当前cpu数
    - 优先级不同可以采用优先队列(PriorityBlockingQueue)
    - 执行时间不同的任务可以交给不同规模的线程池处理,或者使用优先队列,让执行时间短的任务先执行
    - 依赖数据库连接池的任务，因为线程提交SQL后需要等待数据库返回结果，如果等待的时间越长CPU空闲时间就越长，那么线程数应该设置越大，这样才能更好的利用CPU
    - 阻塞队列最好使用有界队列,采用无界队列,一旦任务积压就会占过多内存